The dynamic programming aspect of this algorithm is implemented in the alg() and dynamic_stuff() functions. dynamic_stuff() is called by alg(), used for generating tables (stored as an array of equal length to the inputted string), which allows alg() to repeated break the problem down into smaller subproblems (i.e. the rest of the string). This table reflects the potential words that show up in the string, starting with the first letter of the string.
For example, suppose we know that "because", "be", & "cause" are all words, and we got the string "because". dynamic_stuff("because") would output the array 0100001, since the only known words that show up in "because" starting with 'b' is "be" and "because". As such, two 1's in the array mark the first and last 'e's to reflect the words "be" and "b.....e".
In this example, alg("because", "", 0) would first call dynamic_stuff("because"), which would output the array 0100001. This array allows alg() to break "because" down into subproblems "be" & "cause", while also remembering that "because" is also registered as a word. alg() registers that "be" is a word by reading the first 1 in the array, in which case it would call alg("cause", "be", rankof("be")), which leads to a dynamic_stuff("cause") call to test that subproblem after deciding that "be" was already a complete word. Since the only known word in "cause" in our example is the full word, it would return the array 00001, where the only 1 corresponding to the e indicates that the only word known is "c...e". This 1 would in turn make an alg("", "be cause", rankof("be") + rankof("cause")) The base case encoded into the algorithm is triggered when string line is empty (aka. when all characters in the line are used), in which case it does in this branch. Once this is hit, a file is created with the valid string and the call runs back to the first alg("because", "", 0), where it would continue on to find the second 1 in the array. This would then trigger an alg("", "because", rankof("because")), which also triggers the base case, outputting the second file and exiting the algorithm.
The decision path of the example used is as follows:
     0100001                   00001
alg("because", "", 0) --> alg("cause", "be", rankof("be")) --> alg("", "be cause", rankof("be") + rankof("cause")) --> base case

                      --> alg("", "because", rankof("because")) --> base case

Full project can be found on https://github.com/ryanku98/lost-whitespace-file-recreation-project